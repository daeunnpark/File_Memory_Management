
void printArray1(struct addr_in_use* ptr){
	int j=0;
	for(j=0; j<25;j++){
		printf("At %d addr :%p, count: %d\n",j+1, (ptr+j)->addr, (ptr+j)->ref_count);
	}
}


void printArray2(struct files_in_use* ptr){
	int j=0;

	for(j=0; j<5;j++){
		printf("At %d filename :%s, count: %d, FP: %p ",j+1, (ptr+j)->filename, (ptr+j)->ref_count, (ptr+j)->fptr);

		if((ptr+j)->fptr!=NULL){
			printf("FD: %d\n",fileno((ptr+j)->fptr));

		}
		else {
			printf("FD:  \n"); 


		}
	}
}



/*
	   void *p;// = cse320_malloc(40);

	   for(int j=0; j<25; j++){
	   p = cse320_malloc(30); 
	   }

	   cse320_free(p);
	   cse320_free(p); 
	   for(int j=0; j<5; j++){
	   p = cse320_malloc(30); 
	   }

	   cse320_malloc(30);
	   cse320_malloc(30);
	   cse320_malloc(30); 
	   printArray1(addr_array); 

	 */
	/*

	   printf("opened: %d\n",fileno(cse320_fopen("A")));
	   printf("opened: %d\n", fileno(cse320_fopen("A"))); 
	   cse320_fclose("A");
	//printArray2(files_array); 	
	cse320_fclose("A");
	cse320_fopen("B");
	cse320_fopen("C"); 
	cse320_fopen("D"); 
	cse320_fopen("E"); 
	//	cse320_fclose("A");

	printf("opened: %d\n",fileno(cse320_fopen("G")));

	cse320_fclose("C");
	printf("opened: %d\n",fileno(cse320_fopen("Z"))); 
	cse320_fclose("D");
	cse320_fopen("Q");
	printArray2(files_array);  

	cse320_fclose("E");
	cse320_fopen("RR");
	//printArray2(files_array);
	cse320_fclose("RR");
	cse320_fclose("RR"); 


	 */
	//printArray2(files_array); 

			//	pthread_join(tid1, NULL);
			//	printf("the main thread finished\n"); 




			printf("time set\n");
			//istart = clock();
			//diff = clock() - start;		
		}
		//	wait(NULL);
		//sleep(5);	
//		clock_t begin = clock();
//		printf("start %LF\n", (long double)begin);
//		sleep(5);		  
//		clock_t end = clock();

//		double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
//		printf("clock %LF\n",(long double) time_spent);

		//		printf("dif: %lf\n ",(double) (end-begin / CLOCKS_PER_SEC)); 
//		if((clock()-start / CLOCKS_PER_SEC)> 6){
			printf("LET'S JOIN\n");
			pthread_join(tid1, NULL);
			printf("the main thread finished\n"); 
//			start = clock();
//		}



	int status;
	printf("BEFORE everything\n");

	pid_t pid1= getpid();


	int j; 

	pid1 = fork();
	//	printf(" pid: %d\n ", getpid());

	if(pid1==0){ // child
		printf("child!\n");
	//	exit(0);
	} else { // parent

		printf("thread!\n");
		pthread_t tid1, tid2;

		//add to the list at first empty spot

		for(j=0; j<10; j++){	
			if(pidList[j]==0){
				pidList[j] = pid1;
				count++;
				break;
			}
		}

		printf("BEFORE THREADS\n");
		for(int k=0; k<10; k++){
			printf("pid at %d : %d\n",k+1, pidList[k]);
		}		

		if(reap_thread_flag==0){
			pthread_create(&tid1, NULL, cse320_reap_thread, &pidList);  
			printf("the main thread continues with its execution\n"); 		
			reap_thread_flag=1;
		}

		printf("rrrr%d\n", count);
		if(count ==0){
			printf("gggg\n");
			pthread_join(tid1, NULL); 
			printf("the main thread finished\n"); 
		}


	}


p = strtok (NULL, " ");  

	//	char    str[]= "ls -l";
		char ** res  = NULL;
		char *  p    = strtok (command, " ");
p = strtok (NULL, " ");  	
	int n_spaces = 0, i;


		/* split string and append tokens to 'res' */

		while (p) {
			res = realloc (res, sizeof (char*) * ++n_spaces);

			if (res == NULL)
				exit (-1); /* memory allocation failed */

			res[n_spaces-1] = p;

			p = strtok (NULL, " ");
		}

		/* realloc one extra element for the last NULL */

		res = realloc (res, sizeof (char*) * (n_spaces+1));
		res[n_spaces] = 0;

		/* print the result */

		for (i = 0; i < (n_spaces+1); ++i)
			printf ("res[%d] = %s\n", i, res[i]);

		/* free the memory allocated */

		//free (res);

		for (int o = 0; o < 2; ++o){
				printf ("11args[%d] = %s\n", o, args[o]);
				printf("after\n");
			}


